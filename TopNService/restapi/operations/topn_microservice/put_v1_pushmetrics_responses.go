// Code generated by go-swagger; DO NOT EDIT.

package topn_microservice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "TopNService/models"
)

// PutV1PushmetricsOKCode is the HTTP code returned for type PutV1PushmetricsOK
const PutV1PushmetricsOKCode int = 200

/*PutV1PushmetricsOK Metric uploaded to top N service.

swagger:response putV1PushmetricsOK
*/
type PutV1PushmetricsOK struct {

	/*
	  In: Body
	*/
	Payload *models.MetricResponse `json:"body,omitempty"`
}

// NewPutV1PushmetricsOK creates PutV1PushmetricsOK with default headers values
func NewPutV1PushmetricsOK() *PutV1PushmetricsOK {

	return &PutV1PushmetricsOK{}
}

// WithPayload adds the payload to the put v1 pushmetrics o k response
func (o *PutV1PushmetricsOK) WithPayload(payload *models.MetricResponse) *PutV1PushmetricsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put v1 pushmetrics o k response
func (o *PutV1PushmetricsOK) SetPayload(payload *models.MetricResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutV1PushmetricsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutV1PushmetricsNotFoundCode is the HTTP code returned for type PutV1PushmetricsNotFound
const PutV1PushmetricsNotFoundCode int = 404

/*PutV1PushmetricsNotFound Top N Service not reachable.

swagger:response putV1PushmetricsNotFound
*/
type PutV1PushmetricsNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutV1PushmetricsNotFound creates PutV1PushmetricsNotFound with default headers values
func NewPutV1PushmetricsNotFound() *PutV1PushmetricsNotFound {

	return &PutV1PushmetricsNotFound{}
}

// WithPayload adds the payload to the put v1 pushmetrics not found response
func (o *PutV1PushmetricsNotFound) WithPayload(payload *models.Error) *PutV1PushmetricsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put v1 pushmetrics not found response
func (o *PutV1PushmetricsNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutV1PushmetricsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutV1PushmetricsInternalServerErrorCode is the HTTP code returned for type PutV1PushmetricsInternalServerError
const PutV1PushmetricsInternalServerErrorCode int = 500

/*PutV1PushmetricsInternalServerError Internal server error (e.g. lost database connection)

swagger:response putV1PushmetricsInternalServerError
*/
type PutV1PushmetricsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutV1PushmetricsInternalServerError creates PutV1PushmetricsInternalServerError with default headers values
func NewPutV1PushmetricsInternalServerError() *PutV1PushmetricsInternalServerError {

	return &PutV1PushmetricsInternalServerError{}
}

// WithPayload adds the payload to the put v1 pushmetrics internal server error response
func (o *PutV1PushmetricsInternalServerError) WithPayload(payload *models.Error) *PutV1PushmetricsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put v1 pushmetrics internal server error response
func (o *PutV1PushmetricsInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutV1PushmetricsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
