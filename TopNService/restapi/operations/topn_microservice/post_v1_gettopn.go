// Code generated by go-swagger; DO NOT EDIT.

package topn_microservice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostV1GettopnHandlerFunc turns a function with the right signature into a post v1 gettopn handler
type PostV1GettopnHandlerFunc func(PostV1GettopnParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostV1GettopnHandlerFunc) Handle(params PostV1GettopnParams) middleware.Responder {
	return fn(params)
}

// PostV1GettopnHandler interface for that can handle valid post v1 gettopn params
type PostV1GettopnHandler interface {
	Handle(PostV1GettopnParams) middleware.Responder
}

// NewPostV1Gettopn creates a new http.Handler for the post v1 gettopn operation
func NewPostV1Gettopn(ctx *middleware.Context, handler PostV1GettopnHandler) *PostV1Gettopn {
	return &PostV1Gettopn{Context: ctx, Handler: handler}
}

/*PostV1Gettopn swagger:route POST /v1/gettopn topn-microservice postV1Gettopn

To fetch TOP N devices based on query parameter on any parameter of metrics.

To fetch TOP N devices based on query parameter on any parameter of metrics. Metrics can be sorted on any JSON field. Multi column/field sorting also enabled. For example get Top N device type in some geo location. Top device type from some customer account etc
For example:
```
POST /api/topn/v1/gettopn
```
Sample request body will be :
```
  {
    metrickey:"devicetype",
    metricValue:"printer",
    topValueCount:1000,
    pageSize:100,
  }
```
Sample response body will be :
```

{
  topNMetrics :[
      {
    metrickey:"devicetype",
    metricValue:"printer",
    topValueCount:1000,
    pageSize:100,
    pagenumber:0,
  }
    ],
  nextPage :{
    metrickey :"devicetype",
    metricvalue:"printer",
    topvaluecount:1000,
    pagesize:1
  }
}
```


*/
type PostV1Gettopn struct {
	Context *middleware.Context
	Handler PostV1GettopnHandler
}

func (o *PostV1Gettopn) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostV1GettopnParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
