// Code generated by go-swagger; DO NOT EDIT.

package topn_microservice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostV1GettopnHandlerFunc turns a function with the right signature into a post v1 gettopn handler
type PostV1GettopnHandlerFunc func(PostV1GettopnParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostV1GettopnHandlerFunc) Handle(params PostV1GettopnParams) middleware.Responder {
	return fn(params)
}

// PostV1GettopnHandler interface for that can handle valid post v1 gettopn params
type PostV1GettopnHandler interface {
	Handle(PostV1GettopnParams) middleware.Responder
}

// NewPostV1Gettopn creates a new http.Handler for the post v1 gettopn operation
func NewPostV1Gettopn(ctx *middleware.Context, handler PostV1GettopnHandler) *PostV1Gettopn {
	return &PostV1Gettopn{Context: ctx, Handler: handler}
}

/*PostV1Gettopn swagger:route POST /v1/gettopn topn-microservice postV1Gettopn

To fetch TOP N information based on the statistical operation on metrics collected from internal services.

For example metrics collected from service 1 are  below
```
[
{
 "customerAccount": "M Mobile",
 "eventTime": "Tue May 14 2019 18:11:15 GMT+0530 (India Standard Time)"
 "latitude": "123",
 "longitude": "123",
 "cell": "Bangalore India"
 "metricSource": "Internal Service A",
 "metricsParam":{
   "cpuUsage":"90"
 }

}

{
 "customerAccount": "P Mobile",
 "eventTime": "Tue May 14 2019 18:11:15 GMT+0530 (India Standard Time)"
 "latitude": "129",
 "longitude": "723",
 "cell": "Bangalore India"
 "metricSource": "Internal Service A",
 "metricsParam":{
   "cpuUsage":"50"
 }

}

]

And user want to know top 1 CPU consuming customer Account then it should result in.

customerAccount= "P Mobile"
```
 For example:
 ```
 POST /api/topn/v1/gettopn
 ```
 Sample request body will be :
 ```
   {
     metrickey:"cpuUsage",
     filterCriteria:{
       list:[{attributeName:"",
         attributeValue:"",
         operator:""
       }],
       relational:[{attributeName:"",
         attributeValue:"",
         operator:""
       }],
       rangeCriteria:[
         {attributeName:"",
         attributeValue:"",
         operator:""
       }]
     },
     topValueCount:1000,
     pageSize:100,
     pageNo:1
   }
 ```
 Sample response body will be :
 ```

 {
   topNMetrics :[
       {
     metrickey:"cpuUsage",
     metricValue:"100",
   }...
     ],
   nextPage :{
     metrickey :"cpuUsage",
     filterCriteria:{},
     topvaluecount:1000,
     pagesize:100,
     pageNo:2

   }
 }
 ```


*/
type PostV1Gettopn struct {
	Context *middleware.Context
	Handler PostV1GettopnHandler
}

func (o *PostV1Gettopn) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostV1GettopnParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
