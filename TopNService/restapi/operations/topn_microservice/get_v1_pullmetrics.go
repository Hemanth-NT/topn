// Code generated by go-swagger; DO NOT EDIT.

package topn_microservice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetV1PullmetricsHandlerFunc turns a function with the right signature into a get v1 pullmetrics handler
type GetV1PullmetricsHandlerFunc func(GetV1PullmetricsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetV1PullmetricsHandlerFunc) Handle(params GetV1PullmetricsParams) middleware.Responder {
	return fn(params)
}

// GetV1PullmetricsHandler interface for that can handle valid get v1 pullmetrics params
type GetV1PullmetricsHandler interface {
	Handle(GetV1PullmetricsParams) middleware.Responder
}

// NewGetV1Pullmetrics creates a new http.Handler for the get v1 pullmetrics operation
func NewGetV1Pullmetrics(ctx *middleware.Context, handler GetV1PullmetricsHandler) *GetV1Pullmetrics {
	return &GetV1Pullmetrics{Context: ctx, Handler: handler}
}

/*GetV1Pullmetrics swagger:route GET /v1/pullmetrics topn-microservice getV1Pullmetrics

All Internal service will expose this API.TopN service will consume/pull metrics using this API.(NOTE THIS IS DOCUMENTS IN SAME SWAGGER FILE FOR DEMO PURPOSE BUT THIS SERVICE RUNS ON INTERNAL SERVICES NOT ON TOP N)

All internal service will expose this endpoint. TOP N service will pull metrics from this API exposed by internal services.Reponse of this API will be array of metrics.

For example:
```
get /api/topn/v1/pushmetrics
```

metric content:
```
  [{
     "customerAccount": "M Mobile",
     "eventTime": "Tue May 14 2019 18:11:15 GMT+0530 (India Standard Time)"
     "latitude": "123",
     "longitude": "123",
     "cell": "Bangalore India"
     "metricSource": "a",
     "metricsParam":{
        "metricParam1":"a",
        "metricParam2":"b",
        ...
      }
  }]
```


*/
type GetV1Pullmetrics struct {
	Context *middleware.Context
	Handler GetV1PullmetricsHandler
}

func (o *GetV1Pullmetrics) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetV1PullmetricsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
