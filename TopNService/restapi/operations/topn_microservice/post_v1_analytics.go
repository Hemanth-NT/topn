// Code generated by go-swagger; DO NOT EDIT.

package topn_microservice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostV1AnalyticsHandlerFunc turns a function with the right signature into a post v1 analytics handler
type PostV1AnalyticsHandlerFunc func(PostV1AnalyticsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostV1AnalyticsHandlerFunc) Handle(params PostV1AnalyticsParams) middleware.Responder {
	return fn(params)
}

// PostV1AnalyticsHandler interface for that can handle valid post v1 analytics params
type PostV1AnalyticsHandler interface {
	Handle(PostV1AnalyticsParams) middleware.Responder
}

// NewPostV1Analytics creates a new http.Handler for the post v1 analytics operation
func NewPostV1Analytics(ctx *middleware.Context, handler PostV1AnalyticsHandler) *PostV1Analytics {
	return &PostV1Analytics{Context: ctx, Handler: handler}
}

/*PostV1Analytics swagger:route POST /v1/analytics topn-microservice postV1Analytics

API to do statistical operation on metrics data.It includes getting average of some metrics over last x time interval. Similarly sum, mean, median etc of metrics based on some metric parameter. NOTE- statiscal operation can be done only on number or date fields on other fields operation fail with error.

API to do statistical operation on metrics data.It includes getting average of some metrics over last x time interval. Similarly sum, mean, median etc of metrics based on some metric parameter. NOTE- statiscal operation can be done only on number or date fields on other fields operation fail with error.
For example:
```
POST /api/topn/v1/analytics
```
Sample request body will be :
```
  {
    metrickey:"CPU",
    startTime:12312312313,
    endTime:12312312333,
    pageSize:100,
    pageNo:0,
  }
```
Sample response body will be :
```

{
  metrickey:"cpu",
  average: 12,
  sum:2311,
  metricCount: 122,
  variance :5,
  standardDeviation:2,
  nextPage : {
    metrickey:"CPU",
    startTime:12312312313,
    endTime:12312312333,
    pageSize:100,
    pageNo:1,
  }
}
```


*/
type PostV1Analytics struct {
	Context *middleware.Context
	Handler PostV1AnalyticsHandler
}

func (o *PostV1Analytics) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostV1AnalyticsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
