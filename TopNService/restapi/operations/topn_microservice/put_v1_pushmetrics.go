// Code generated by go-swagger; DO NOT EDIT.

package topn_microservice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PutV1PushmetricsHandlerFunc turns a function with the right signature into a put v1 pushmetrics handler
type PutV1PushmetricsHandlerFunc func(PutV1PushmetricsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutV1PushmetricsHandlerFunc) Handle(params PutV1PushmetricsParams) middleware.Responder {
	return fn(params)
}

// PutV1PushmetricsHandler interface for that can handle valid put v1 pushmetrics params
type PutV1PushmetricsHandler interface {
	Handle(PutV1PushmetricsParams) middleware.Responder
}

// NewPutV1Pushmetrics creates a new http.Handler for the put v1 pushmetrics operation
func NewPutV1Pushmetrics(ctx *middleware.Context, handler PutV1PushmetricsHandler) *PutV1Pushmetrics {
	return &PutV1Pushmetrics{Context: ctx, Handler: handler}
}

/*PutV1Pushmetrics swagger:route PUT /v1/pushmetrics topn-microservice putV1Pushmetrics

used by device upload the metric/feed

Devices present in network push the metric to top N service.Device can have client side application running which will put metrics to server.

For example:
```
put /api/topn/v1/pushmetrics
```

metric content:
```
  {
      "deviceType": "Jphone",
      "customerAccount": "TTL USA"
      "notificationTime": "1212312312313123"
      "metrics":{
        "metric1":"a",
        "metric2":"b",

      }
      ...
      ...
  }
```


*/
type PutV1Pushmetrics struct {
	Context *middleware.Context
	Handler PutV1PushmetricsHandler
}

func (o *PutV1Pushmetrics) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutV1PushmetricsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
