// Code generated by go-swagger; DO NOT EDIT.

package topn_microservice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "TopNService/models"
)

// GetV1PullmetricsOKCode is the HTTP code returned for type GetV1PullmetricsOK
const GetV1PullmetricsOKCode int = 200

/*GetV1PullmetricsOK Metrics pulled by TOP N service from other internal service.

swagger:response getV1PullmetricsOK
*/
type GetV1PullmetricsOK struct {

	/*
	  In: Body
	*/
	Payload *models.Metrics `json:"body,omitempty"`
}

// NewGetV1PullmetricsOK creates GetV1PullmetricsOK with default headers values
func NewGetV1PullmetricsOK() *GetV1PullmetricsOK {

	return &GetV1PullmetricsOK{}
}

// WithPayload adds the payload to the get v1 pullmetrics o k response
func (o *GetV1PullmetricsOK) WithPayload(payload *models.Metrics) *GetV1PullmetricsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get v1 pullmetrics o k response
func (o *GetV1PullmetricsOK) SetPayload(payload *models.Metrics) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetV1PullmetricsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetV1PullmetricsNotFoundCode is the HTTP code returned for type GetV1PullmetricsNotFound
const GetV1PullmetricsNotFoundCode int = 404

/*GetV1PullmetricsNotFound Internal service not reachable.

swagger:response getV1PullmetricsNotFound
*/
type GetV1PullmetricsNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetV1PullmetricsNotFound creates GetV1PullmetricsNotFound with default headers values
func NewGetV1PullmetricsNotFound() *GetV1PullmetricsNotFound {

	return &GetV1PullmetricsNotFound{}
}

// WithPayload adds the payload to the get v1 pullmetrics not found response
func (o *GetV1PullmetricsNotFound) WithPayload(payload *models.Error) *GetV1PullmetricsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get v1 pullmetrics not found response
func (o *GetV1PullmetricsNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetV1PullmetricsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetV1PullmetricsInternalServerErrorCode is the HTTP code returned for type GetV1PullmetricsInternalServerError
const GetV1PullmetricsInternalServerErrorCode int = 500

/*GetV1PullmetricsInternalServerError Internal server error.

swagger:response getV1PullmetricsInternalServerError
*/
type GetV1PullmetricsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetV1PullmetricsInternalServerError creates GetV1PullmetricsInternalServerError with default headers values
func NewGetV1PullmetricsInternalServerError() *GetV1PullmetricsInternalServerError {

	return &GetV1PullmetricsInternalServerError{}
}

// WithPayload adds the payload to the get v1 pullmetrics internal server error response
func (o *GetV1PullmetricsInternalServerError) WithPayload(payload *models.Error) *GetV1PullmetricsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get v1 pullmetrics internal server error response
func (o *GetV1PullmetricsInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetV1PullmetricsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
