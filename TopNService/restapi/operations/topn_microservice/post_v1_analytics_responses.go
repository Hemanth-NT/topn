// Code generated by go-swagger; DO NOT EDIT.

package topn_microservice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "TopNService/models"
)

// PostV1AnalyticsOKCode is the HTTP code returned for type PostV1AnalyticsOK
const PostV1AnalyticsOKCode int = 200

/*PostV1AnalyticsOK Metric request served successfully

swagger:response postV1AnalyticsOK
*/
type PostV1AnalyticsOK struct {

	/*
	  In: Body
	*/
	Payload *models.MetricAnalyticResponse `json:"body,omitempty"`
}

// NewPostV1AnalyticsOK creates PostV1AnalyticsOK with default headers values
func NewPostV1AnalyticsOK() *PostV1AnalyticsOK {

	return &PostV1AnalyticsOK{}
}

// WithPayload adds the payload to the post v1 analytics o k response
func (o *PostV1AnalyticsOK) WithPayload(payload *models.MetricAnalyticResponse) *PostV1AnalyticsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post v1 analytics o k response
func (o *PostV1AnalyticsOK) SetPayload(payload *models.MetricAnalyticResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostV1AnalyticsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostV1AnalyticsBadRequestCode is the HTTP code returned for type PostV1AnalyticsBadRequest
const PostV1AnalyticsBadRequestCode int = 400

/*PostV1AnalyticsBadRequest Bad Request, Unable to parse the metric message.

swagger:response postV1AnalyticsBadRequest
*/
type PostV1AnalyticsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostV1AnalyticsBadRequest creates PostV1AnalyticsBadRequest with default headers values
func NewPostV1AnalyticsBadRequest() *PostV1AnalyticsBadRequest {

	return &PostV1AnalyticsBadRequest{}
}

// WithPayload adds the payload to the post v1 analytics bad request response
func (o *PostV1AnalyticsBadRequest) WithPayload(payload *models.Error) *PostV1AnalyticsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post v1 analytics bad request response
func (o *PostV1AnalyticsBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostV1AnalyticsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostV1AnalyticsInternalServerErrorCode is the HTTP code returned for type PostV1AnalyticsInternalServerError
const PostV1AnalyticsInternalServerErrorCode int = 500

/*PostV1AnalyticsInternalServerError Internal server error

swagger:response postV1AnalyticsInternalServerError
*/
type PostV1AnalyticsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostV1AnalyticsInternalServerError creates PostV1AnalyticsInternalServerError with default headers values
func NewPostV1AnalyticsInternalServerError() *PostV1AnalyticsInternalServerError {

	return &PostV1AnalyticsInternalServerError{}
}

// WithPayload adds the payload to the post v1 analytics internal server error response
func (o *PostV1AnalyticsInternalServerError) WithPayload(payload *models.Error) *PostV1AnalyticsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post v1 analytics internal server error response
func (o *PostV1AnalyticsInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostV1AnalyticsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
