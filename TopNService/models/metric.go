// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Metric An metric feed
// swagger:model Metric
type Metric struct {

	// Humar readable location like Bangalore, Delhi etc
	// Required: true
	Cell *string `json:"cell"`

	// service provider/customer id/Customer info used in analytical operation
	// Required: true
	CustomerAccount *string `json:"customerAccount"`

	// Notification generation time
	// Required: true
	EventTime *string `json:"eventTime"`

	// latitude where device location
	// Required: true
	Latitude *int64 `json:"latitude"`

	// Longitude where device location
	// Required: true
	Longitude *int64 `json:"longitude"`

	// Source or internal service from which metric is pulled
	// Required: true
	MetricSource *string `json:"metricSource"`

	// JSON object it can have any mertics from device. Like usage of device, Frequent access of some site, CPU, Memory info etc But these information should adhare to standerd defined by TOP N Service
	// Required: true
	MetricsParam interface{} `json:"metricsParam"`
}

// Validate validates this metric
func (m *Metric) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCell(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatitude(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLongitude(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetricSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetricsParam(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Metric) validateCell(formats strfmt.Registry) error {

	if err := validate.Required("cell", "body", m.Cell); err != nil {
		return err
	}

	return nil
}

func (m *Metric) validateCustomerAccount(formats strfmt.Registry) error {

	if err := validate.Required("customerAccount", "body", m.CustomerAccount); err != nil {
		return err
	}

	return nil
}

func (m *Metric) validateEventTime(formats strfmt.Registry) error {

	if err := validate.Required("eventTime", "body", m.EventTime); err != nil {
		return err
	}

	return nil
}

func (m *Metric) validateLatitude(formats strfmt.Registry) error {

	if err := validate.Required("latitude", "body", m.Latitude); err != nil {
		return err
	}

	return nil
}

func (m *Metric) validateLongitude(formats strfmt.Registry) error {

	if err := validate.Required("longitude", "body", m.Longitude); err != nil {
		return err
	}

	return nil
}

func (m *Metric) validateMetricSource(formats strfmt.Registry) error {

	if err := validate.Required("metricSource", "body", m.MetricSource); err != nil {
		return err
	}

	return nil
}

func (m *Metric) validateMetricsParam(formats strfmt.Registry) error {

	if err := validate.Required("metricsParam", "body", m.MetricsParam); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Metric) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Metric) UnmarshalBinary(b []byte) error {
	var res Metric
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
