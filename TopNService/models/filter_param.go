// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FilterParam Basic unit of filtering
// swagger:model filterParam
type FilterParam struct {

	// Value with which json field to be filtered
	// Required: true
	AttributeKey *string `json:"attributeKey"`

	// Any JSON field to be filtered
	// Required: true
	AttributeValue *string `json:"attributeValue"`

	// operators > ,< ,= ,!=, etc
	// Required: true
	Operator *string `json:"operator"`
}

// Validate validates this filter param
func (m *FilterParam) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributeKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAttributeValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FilterParam) validateAttributeKey(formats strfmt.Registry) error {

	if err := validate.Required("attributeKey", "body", m.AttributeKey); err != nil {
		return err
	}

	return nil
}

func (m *FilterParam) validateAttributeValue(formats strfmt.Registry) error {

	if err := validate.Required("attributeValue", "body", m.AttributeValue); err != nil {
		return err
	}

	return nil
}

func (m *FilterParam) validateOperator(formats strfmt.Registry) error {

	if err := validate.Required("operator", "body", m.Operator); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FilterParam) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FilterParam) UnmarshalBinary(b []byte) error {
	var res FilterParam
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
