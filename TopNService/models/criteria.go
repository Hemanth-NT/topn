// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Criteria criteria
// swagger:model criteria
type Criteria struct {

	// For example SQL IN condition query.
	// Required: true
	List []*FilterParam `json:"list"`

	// For SQL Between condition call.
	// Required: true
	Range []*FilterParam `json:"range"`

	// For SQL > < <> condition call.
	// Required: true
	Relational []*FilterParam `json:"relational"`
}

// Validate validates this criteria
func (m *Criteria) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelational(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Criteria) validateList(formats strfmt.Registry) error {

	if err := validate.Required("list", "body", m.List); err != nil {
		return err
	}

	for i := 0; i < len(m.List); i++ {
		if swag.IsZero(m.List[i]) { // not required
			continue
		}

		if m.List[i] != nil {
			if err := m.List[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Criteria) validateRange(formats strfmt.Registry) error {

	if err := validate.Required("range", "body", m.Range); err != nil {
		return err
	}

	for i := 0; i < len(m.Range); i++ {
		if swag.IsZero(m.Range[i]) { // not required
			continue
		}

		if m.Range[i] != nil {
			if err := m.Range[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("range" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Criteria) validateRelational(formats strfmt.Registry) error {

	if err := validate.Required("relational", "body", m.Relational); err != nil {
		return err
	}

	for i := 0; i < len(m.Relational); i++ {
		if swag.IsZero(m.Relational[i]) { // not required
			continue
		}

		if m.Relational[i] != nil {
			if err := m.Relational[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relational" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Criteria) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Criteria) UnmarshalBinary(b []byte) error {
	var res Criteria
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
