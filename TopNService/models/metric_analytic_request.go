// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MetricAnalyticRequest metric analytic request
// swagger:model metricAnalyticRequest
type MetricAnalyticRequest struct {

	// end time
	// Required: true
	EndTime *string `json:"endTime"`

	// metrickey
	// Required: true
	Metrickey *string `json:"metrickey"`

	// page no
	// Required: true
	PageNo *int64 `json:"pageNo"`

	// page size
	// Required: true
	PageSize *int64 `json:"pageSize"`

	// start time
	// Required: true
	StartTime *string `json:"startTime"`
}

// Validate validates this metric analytic request
func (m *MetricAnalyticRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetrickey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePageNo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePageSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetricAnalyticRequest) validateEndTime(formats strfmt.Registry) error {

	if err := validate.Required("endTime", "body", m.EndTime); err != nil {
		return err
	}

	return nil
}

func (m *MetricAnalyticRequest) validateMetrickey(formats strfmt.Registry) error {

	if err := validate.Required("metrickey", "body", m.Metrickey); err != nil {
		return err
	}

	return nil
}

func (m *MetricAnalyticRequest) validatePageNo(formats strfmt.Registry) error {

	if err := validate.Required("pageNo", "body", m.PageNo); err != nil {
		return err
	}

	return nil
}

func (m *MetricAnalyticRequest) validatePageSize(formats strfmt.Registry) error {

	if err := validate.Required("pageSize", "body", m.PageSize); err != nil {
		return err
	}

	return nil
}

func (m *MetricAnalyticRequest) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("startTime", "body", m.StartTime); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetricAnalyticRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetricAnalyticRequest) UnmarshalBinary(b []byte) error {
	var res MetricAnalyticRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
